#!/usr/bin/env python
# vim: set fileencoding=utf-8 filetype=python :
"""Link configs for tools defined here to $HOME.

Why this script?
================
The obvious alternative would be a directory like this::

    configs/.bashrc
    configs/.vimrc
    configs/.vim/

- A simple ls does not work.
- File managers need to display hidden files.
- Need to type dot when navigating on the commandline.
"""
import os
from os import listdir, chdir
from os.path import abspath, dirname, isdir, join
import shutil
import subprocess
from optparse import OptionParser

IGNORED_DIRS = ['.git', 'kde-shortcuts']

# everything happens relative to this file's parent dir
here = abspath(dirname(__file__))
chdir(here)
checkout_dirname = os.path.basename(here)

OVERRIDE_PREVIOUS = False
HOME = os.environ['HOME']
BACKUP_DIR = join(HOME, 'bak', checkout_dirname)

import logging
log = logging.getLogger('init')
logging.basicConfig(level=logging.WARN, format='[%(levelname)s] %(message)s')


def run(cmd):
    "Run command as if in shell. Blocking."
    p = subprocess.Popen(cmd, shell=True)
    p.wait()


def makelink(src, dest_filename):
    "Think ln -s"
    dest = join(HOME, dest_filename)
    log.debug('link %s %s', src, dest)
    if OVERRIDE_PREVIOUS:
        if os.path.islink(dest):
            log.debug('Removing link '+dest)
            os.unlink(dest)
        elif os.path.isdir(dest) or os.path.isfile(dest):
            log.warn("mv %s %s", dest, BACKUP_DIR)
            shutil.move(dest, BACKUP_DIR)
    src = join(os.getcwd(), src)
    try:
        os.symlink(src, dest)
        log.debug('Linked %s to %s' % (src, dest))
    except OSError as e:
        if e.strerror != 'File exists':
            raise
        else:
            log.info('%s: %s' % (e.strerror, src))


def handle_tool(tooldir):
    """
    Given:

        vim/vimrc
        vim/vim/file1

    It runs:

        ln -s vim/vimrc $HOME/.vimrc
        ln -s vim/vim $HOME/.vim
    """
    log.info('Initializing ' + tooldir)
    files = listdir(tooldir)
    for fname in files:
        src = join(tooldir, fname)
        makelink(src, '.'+fname)


def get_tool_dirs():
    result = filter(isdir, listdir(here))
    return set(result) - set(IGNORED_DIRS)


def gen_git_config(email=None, name=None):
    path = join(HOME, '.gitconfig.d', 'user')

    if email is None:
        email = raw_input("git email: ")
    if name is None:
        name = raw_input("git name: ")

    cfg = """\
[user]
  email = {email}
  name = {name}
""".format(**locals())

    if not os.path.exists(path):
        with open(path, 'w') as f:
            f.write(cfg)
        log.info("Wrote {0}".format(path))


def main():
    run('git submodule update --init')
    for tool in get_tool_dirs():
        handle_tool(tool)


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-f", "--force",
                      action="store_true", dest="force", default=False,
                      help="force overriding old options. Removes links and\
                            moves dirs/files to $HOME/bak")
    parser.add_option("-e", "--email",
                      action="store", dest="email",
                      help="email for git")
    parser.add_option("-n", "--name",
                      action="store", dest="name",
                      help='name for git, e.g. "Felix Hummel"')
    parser.add_option("-s", "--skip-git",
                      action="store_true", dest="skip_git", default=False,
                      help="do not ask for git name and email")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="info logging")
    parser.add_option("-d", "--debug",
                      action="store_true", dest="debug", default=False,
                      help="debug logging")

    (options, args) = parser.parse_args()
    if options.debug:
        log.setLevel(logging.DEBUG)
    elif options.verbose:
        log.setLevel(logging.INFO)
    OVERRIDE_PREVIOUS = options.force
    # if we may need backups, create BACKUP_DIR
    if OVERRIDE_PREVIOUS:
        if not isdir(BACKUP_DIR):
            os.makedirs(BACKUP_DIR)
    main()
    if not options.skip_git:
        gen_git_config(options.email, options.name)
